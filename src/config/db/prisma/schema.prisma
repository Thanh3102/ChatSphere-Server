// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  password     String
  dateOfBirth  DateTime @db.Date
  phoneNumber  String
  gender       String
  email        String   @unique
  verifyEmail  Boolean  @default(false)
  image        String?
  createAt     DateTime @default(now())
  lastEditAt   DateTime @default(now())
  updateAt     DateTime @updatedAt
  socketId     String?
  isOnline     Boolean  @default(false)
  lastOnlineAt DateTime @default(now())

  conversationMemberIds String[]             @db.ObjectId
  conversationMembers   ConversationMember[] @relation("ConversationMember_User")

  memberAddedIds String[]             @db.ObjectId
  memberAddeds   ConversationMember[] @relation("ConversationMember_AddedUser")

  memberChagnedNickNameIds String[]             @db.ObjectId
  memberChagnedNickNames   ConversationMember[] @relation("ConversationMember_NickNameChangedUser")

  createdConversationIds String[]
  createdConversations   Conversation[] @relation("Conversation_CreatedUser")

  seenMessageIds String[]  @db.ObjectId
  seenMessages   Message[] @relation("Seen", fields: [seenMessageIds], references: [id])

  messages Message[]

  emailVerifyOTP  EmailVerifyOTP[]
  roomParticipant RoomParticipant? @relation("roomParticipant")
  roomHost        Room?            @relation("host")
  pinMessage      Message[]        @relation("pinner")
}

model EmailVerifyOTP {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  otp       String
  userId    String   @db.ObjectId
  createdAt DateTime @default(now())
  expiredAt DateTime
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Conversation {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt     DateTime @default(now())
  lastMessageAt DateTime @default(now())
  emoji         String   @default("1f44d")
  numberOfPins  Int      @default(0)
  pinLimit      Int      @default(5)

  isGroup             Boolean?
  groupName           String?
  groupImage          String?
  groupImageAssetId   String?
  groupNumberOfMember Int?     @default(0)
  groupMaxMember      Int?     @default(250)

  createdBy   String @db.ObjectId
  createdUser User   @relation("Conversation_CreatedUser", fields: [createdBy], references: [id])

  messageIds String[]  @db.ObjectId
  messages   Message[]

  lastMessageId String?  @unique @db.ObjectId
  lastMessage   Message? @relation("lastMessage", references: [id], fields: [lastMessageId], onUpdate: Cascade, onDelete: SetNull)

  memberIds String[]             @db.ObjectId
  members   ConversationMember[] @relation("ConversationMember_Conversation")

  room Room?
}

model ConversationMember {
  id       String   @id @default(auto()) @map("_id") @db.ObjectId
  joinedAt DateTime @default(now())
  role     String   @default("member")

  nickName String? @db.ObjectId

  nickNameChangedBy   String? @db.ObjectId
  nickNameChangedUser User?   @relation("ConversationMember_NickNameChangedUser", fields: [nickNameChangedBy], references: [id])

  addedBy   String @db.ObjectId
  addedUser User   @relation("ConversationMember_AddedUser", fields: [addedBy], references: [id])

  userId String @db.ObjectId
  user   User   @relation("ConversationMember_User", fields: [userId], references: [id])

  conversationId String       @db.ObjectId
  conversation   Conversation @relation("ConversationMember_Conversation", fields: [conversationId], references: [id], onDelete: Cascade)

  @@unique([conversationId, userId])
}

model Message {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  body      String?
  createdAt DateTime  @default(now())
  recall    Boolean   @default(false)
  type      String    @default("text")
  status    String    @default("sent")
  isTranfer Boolean?  @default(false)
  isPin     Boolean   @default(false)
  pinnedAt  DateTime?

  fileType      String?
  fileAssetId   String?
  fileURL       String?
  fileSecureURL String?
  fileName      String?
  fileSize      Int?

  notificationAction String?
  notificationTarget String?

  voiceDuration Int?

  responseMessageId String?   @db.ObjectId
  responseMessage   Message?  @relation("response", fields: [responseMessageId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  responsedMessages Message[] @relation("response")

  seenIds String[] @db.ObjectId
  seen    User[]   @relation("Seen", fields: [seenIds], references: [id])

  conversation   Conversation? @relation(fields: [conversationId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  conversationId String?       @db.ObjectId

  senderId String @db.ObjectId
  sender   User   @relation(fields: [senderId], references: [id], onDelete: Cascade)

  pinnerId String? @db.ObjectId
  pinner   User?   @relation("pinner", fields: [pinnerId], references: [id], onDelete: Cascade)

  lastMessageConversation Conversation? @relation("lastMessage")
}

model Room {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  type      String
  isGroup   Boolean
  isEnded   Boolean   @default(false)
  startedAt DateTime  @default(now())
  endedAt   DateTime?

  hostId String @unique @db.ObjectId
  host   User   @relation("host", fields: [hostId], references: [id])

  conversationId String       @unique @db.ObjectId
  conversation   Conversation @relation(fields: [conversationId], references: [id])

  roomParticipants RoomParticipant[]
}

model RoomParticipant {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  socketId String @unique

  userId String @unique @db.ObjectId
  user   User   @relation("roomParticipant", fields: [userId], references: [id])

  roomId String @db.ObjectId
  room   Room   @relation(fields: [roomId], references: [id])
}
